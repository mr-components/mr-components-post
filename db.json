{
  "posts": [
    {
      "id": "01",
      "tags": [
        "story time"
      ],
      "category": "desarrollo",
      "createdAt": "2022/02/23",
      "publishedAt": "2022/02/23",
      "author": "LuisForerop",
      "status": "published",
      "title": "¬°Un dramaturgo me ayud√≥ a salir a producci√≥n!",
      "brief": "Si quieres *saber* c√≥mo fue que un dramaturgo me facilit√≥ la vida en mi primera salida a producci√≥n y lo que aprend√≠ sobre el proceso, acomp√°√±ame hasta el final.",
      "readingTime": 5,
      "path": "playwright-para-automatizar-procesos",
      "content": "Hace ya cerca de una semana que salimos a producci√≥n (*mi primera vez* üò±) con una migraci√≥n en la que estuve trabajando por unos *cuatro meses*, y la verdad es que resulta emocionante saber que luego de escribir mucho c√≥digo, solucionar bugs y adelantar documentaci√≥n en el proceso, muchos usuarios tendr√°n contacto directo con tu trabajo.\n\nComo todos sabemos, adem√°s de codear, hay m√°s actividades detr√°s de cualquier proyecto de desarrollo, y en el que trabaj√© ten√≠amos algunas tareas \"administrativas\". Resulta que luego de crear componentes deb√≠amos lograr que varios de estos se pudieran editar/configurar desde un m√≥dulo administrativo, lo cual es realmente sencillo con [VTEX IO](https://developers.vtex.com/vtex-developer-docs/docs/welcome).\n\nHasta ah√≠, nada raro, pero teniendo en cuenta que el proyecto se trataba de una migraci√≥n, ten√≠amos que hacer que toda la configuraci√≥n que ya estaba en producci√≥n quedara exactamente igual en nuestra nueva versi√≥n. Uno dir√≠a que hacer unos cuantos clics, subir una que otra imagen, y configurar algunos numeritos no es nada del otro mundo, pero, ¬øqu√© pasa cuando esos *\"unos cuantos\"* son **m√°s de 60**? La cosa se pone a√∫n m√°s tediosa cuando hablamos de tener que configurar no solo un workspace, sino varios, y posiblemente tenerlo que hacer m√°s de una vez... As√≠ es, resulta que al solucionar un bug, perdimos la configuraci√≥n de unas 62 p√°ginas üò™.\n\nPara el momento en el que me encomendaron esta tarea estaba bastante ü§î porque tendr√≠a que gastar una buena cantidad de tiempo en un proceso repetitivo, y pues yo soy de los que automatiza hasta el diligenciamiento de un formulario de 4 campos.\n\nPues resulta que ac√° es donde entra nuestro amigo el \"dramaturgo\" ([playwright](https://playwright.dev) en ingl√©s), que es, nada m√°s y nada menos que, una herramienta para web scraping y testing e2e. As√≠ es, mi amigo el \"dramaturgo\" me ayud√≥ a configurar cerca de 75 p√°ginas en m√°s de dos ocasiones, y cargar unas 60 im√°genes para que todo el sitio quedar√° espectacular. No me llevar√© 100% el cr√©dito, porque sin los valiosos videos de Miguel ([Midudev](https://www.instagram.com/midu.dev/) para los amigos) no habr√≠a conocido esta herramienta.\n\nLo que hice fue crear una serie de scrapers utilizando playwright, los cuales me ayudaron a recopilar informaci√≥n de la antigua versi√≥n, configurar la nueva y verificar que ciertas p√°ginas hubiesen quedado correctamente configuradas luego de la salida a producci√≥n.\n\n## ¬øY ya, eso es todo? üôÑ\n\nPues no. Por un lado, quer√≠a presentarte a **[Playwright](https://playwright.dev)**, un proyecto desarrollado por los mismos creadores de [Selenuim](https://www.selenium.dev), y por otro, contarte tres cosas que aprend√≠ luego de invertir m√°s de 40 horas haciendo pruebas de concepto, implementando un versi√≥n b√°sica, creando varios scrapers y d√°ndole un poquito de amor a este proyecto.\n\n 1Ô∏è‚É£ Es posible que *exista una manera **m√°s eficiente** de hacer algo que est√°s haciendo*: antes de comenzar este mini-proyecto, ya hab√≠a gastado un tiempo haciendo ciertas configuraciones, pero result√≥ que el workspace en donde hab√≠a trabajado no era el que se iba a \"desplegar\" (promover para ser m√°s exactos) a producci√≥n, as√≠ que ese tiempo se perdi√≥. Al darme cuenta que podr√≠a pasar de nuevo, estuve perceptivo a alternativas m√°s eficientes de hacerlo, y cuando vi un stream de Midu en el que creaba un scraper para comprarse una XBOX, me di cuenta que podr√≠a usar lo que acababa de ver.\n\n 2Ô∏è‚É£ *Implementa ideas solo **si aportan valor**, porque lo que importa no es la idea sino el problema que resuelve*: tienes que ser consciente de que cada idea en la que vas a trabajar implica un consumo de recursos, sea de tiempo o de equipo, y existe la posibilidad de que no funcione. Analiza si la idea aportar√° suficiente valor a un proceso o al negocio en general y si est√° resolviendo un problema real, y si no, quiz√° sea mejor dejarla en standby o descartarla. Siempre habr√°n otras ideas por explorar.\n\n 3Ô∏è‚É£ ***No** busques siempre la **perfecci√≥n***: esto tiene mucho que ver con el desarrollo √°gil. La perfecci√≥n implica mucho tiempo, y cuando no sabes si algo va a funcionar, esto no es la mejor opci√≥n. Empieza por una prueba de concepto que te ayude a validar si t√©cnicamente el desarrollo de tu idea es posible, luego trabaja en un MVP, que probablemente sea un caos de c√≥digo, y si ves que funciona y puede ofrecer mucho (o suficiente) valor, dale \"cari√±o\" a tu creaci√≥n haciendo peque√±as refactorizaciones o implementando nuevas funcionalidades.\n\nY t√∫, ¬øalguna vez has tenido que hacer procesos repetitivos y aburridos? ¬ølos pudiste automatizar?"
    },
    {
      "id": "02",
      "tags": [
        "tips"
      ],
      "category": "desarrollo",
      "createdAt": "2022/03/18",
      "publishedAt": "2022/03/24",
      "author": "LuisForerop",
      "status": "published",
      "title": "6 cosas a tener en cuenta para iniciar en el mundo de la programaci√≥n",
      "brief": "Si quieres *saber* c√≥mo fue que un dramaturgo me facilit√≥ la vida en mi primera salida a producci√≥n y lo que aprend√≠ sobre el proceso, acomp√°√±ame hasta el final.",
      "readingTime": 5,
      "path": "6-tips-para-iniciar-a-programar",
      "content": "Hace ya un buen tiempo un chico me escribi√≥ por telegram pidi√©ndome orientaci√≥n luego de leer un mensaje que publiqu√© en un grupo de programaci√≥n. En ese mensaje comentaba brevemente que luego de unos meses de *estudio aut√≥nomo, constancia y much√≠simo esfuerzo* hab√≠a conseguido el trabajo en el que estoy ahora mismo.\n\nUna de las cosas que me dijo me hizo recordar a mi yo de meses atr√°s cuando reci√©n hab√≠a tomado la decisi√≥n de cambiar de carrera: ‚Äútengo dudas de qu√© temas debo aprender, [...] me gusta ver muchos videos, pero (siento que) *estoy perdiendo el tiempo*‚Äù.\n\nEsa fue una de las primeras preocupaciones que tuve luego de perder mi primera prueba t√©cnica y darme cuenta que iba a estar m√°s heavy de lo que me imaginaba. Y es que no es para menos, para convertir la programaci√≥n en tu profesi√≥n debes aprender varias cosas, tener claros ciertos conceptos, practicar mucho y estudiar siempre y, para bien o para mal, la cantidad de contenido disponible puede complicar este proceso, as√≠ que deber√°s aprender a busca.\n\n## Antes de comenzar a estudiar ten en cuenta esto\n\nEl √©xito o fracaso de tu proceso de aprendizaje no va a depender √∫nicamente de que tan constante seas estudiando o cual ruta de estudio elijas. Obviamente son factores muy importantes, pero no los √∫nicos. Debes saber que *todos aprendemos de formas diferentes* y uno de los retos que tendr√°s es descubrir cu√°l es la manera m√°s √≥ptima para ti. Explora entre leer documentaci√≥n, seguir tutoriales, hacer cursos, tomar clases (online o presenciales). Esto es algo que te puede llevar tiempo, as√≠ que mientras lo logras, te dejo 6 puntos que te pueden ser de utilidad.\n\n### No estudies hasta el cansancio\n\n*La programaci√≥n es una carrera de fondo y no tanto de velocidad*, porque es un esfuerzo mental que desgasta. No te satures tanto y consigue ser eficiente en tus sesiones de estudio, porque a veces menos es m√°s. De nada nos sirve pasar 9 horas estudiando hasta el cansancio para sentirnos ‚Äúproductivos‚Äù, porque la realidad es que estudiar cansados no sirve de mucho.\n\n### A veces no entender no significa perder el tiempo.\n\nMe pas√≥ varias veces que intentaba estudiar un tema que al final no lograba entender, as√≠ que me frustraba much√≠simo porque me sent√≠a estancado. Con el tiempo me di cuenta que, aunque no entend√≠a el tema en el momento, me quedaban ciertos conceptos, y luego de estudiar y practicar otras cosas se me encend√≠a el foco. Esto va a pasar eventualmente, pero *tener una ruta de estudio clara* te puede salvar de varios momentos como este.\n\n### Estudiar sin practica no sirve.\n\nSiempre ser√° m√°s √∫til, por ejemplo, saber *qu√© m√©todo aplicar para afrontar un reto* y no recordar su sintaxis, que saberse de memoria todos los detalles de implementaci√≥n pero no saber cuando usarlos. Esta habilidad solo la desarrollar√°s si practicas much√≠simo, as√≠ que dedica tiempo suficiente a desarrollar retos de l√≥gica, trabajar en proyectos personales y practicar mucho. Pronto escribir√© un art√≠culo sobre webs que puedes frecuentar para practicar.\n\n### Escribe c√≥digo para que otros puedan leerlo.\n\nHe escuchado decir varias veces que cerca del 80% del tiempo lo dedicamos a leer c√≥digo, y el 20% restante a programar. Quiz√° cuando est√©s iniciando no se as√≠, pero cr√©eme que es cierto. Ya sea para documentar, refactorizar o ver c√≥mo t√∫ o alguien m√°s solucion√≥ un reto, vas a tener que leer mucho c√≥digo, as√≠ que escribe c√≥digo que sea claro. Un buen programador no es aquel que escribe el algoritmo m√°s corto, sino aquel que escribe un c√≥digo f√°cil de leer y entender (lo del performance lo dejamos para despu√©s).\n\n### Lee c√≥digo de otros.\n\nLa industria del desarroll√≥ es muy colaborativa, y casi siempre *trabajar√°s en equipo*, as√≠ que adem√°s de escribir c√≥digo f√°cil de leer, deber√°s acostumbrarte a leer el que escriben el resto del equipo. Para este punto GitHub ser√° tu aliado: busca repositorios de cosas que te llamen la atenci√≥n o husmea el c√≥digo de tus librer√≠as favoritas, de seguro encontrar√°s algo que te guste. Adem√°s, con este ejercicio podr√°s ver c√≥mo otros han solucionado retos que posiblemente enfrentes en un futuro.\n\n### Interact√∫a con otros devs.\n\nIngresa a grupos o foros de la tecnolog√≠a que est√©s aprendiendo. Adem√°s de tener la posibilidad de resolver tus dudas, encontrar publicaciones interesantes y aprender cosas nuevas, aprovecha para apoyar a otros resolviendo preguntas. Esto te ayudar√° a reforzar y reafirmar tus conocimientos. Y si necesitas ayuda, no olvides hacer preguntas muy descriptivas y, si es necesario, anexar la parte de tu c√≥digo que est√° fallando. Evita publicar fotos tomadas con el m√≥vil ya que suelen ser molesto leer c√≥digo as√≠, mejor saca capturas de pantalla o utiliza herramientas como [Carbon](https://carbon.now.sh), que te permite generar una imagen con tu c√≥digo.\n\n## Es hora de aplicar lo que aprendiste\n\nComo te lo mencion√© antes, de nada te sirve estudiar si no practicas, as√≠ que manos a la obra. Espero que implementando estos tips mejores progresivamente en esta maravillosa industria. Com√©ntame si te pareci√≥ interesante o si tienes alg√∫n otro tip valioso. Nutrirnos con experiencias de otros es la mejor pr√°ctica de todo dev.\n\nEn los pr√≥ximos d√≠as espero publicar una gu√≠a para que puedas iniciar en el desarrollo web, as√≠ que si te interesa saber por d√≥nde empezar, ingresa a nuestro canal de Telegram. Te avisar√© sobre novedades del blog y algunos proyectos que se vienen para Mr Components. Y obvio, no olvides seguirnos en nuestras redes sociales, pronto empezaremos a publicar contenido super √∫til."
    }
  ]
}